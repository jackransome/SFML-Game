2.5d
global clock
	attached to ticking sound
	can have this change for dif situations or moves?
	or sync w some music

all moves are synced to global clock
moves can add events that:
	block incoming damage
	do damage to an enemy
	set up something for next clock cycle, or more in the future
	things happening at the same time have synergy
temporarily slow downs time

moves are basically just bindings between controls and the creation of events

event data structure:
	source (player / enemy id)
	type
	run()
		can see what other events are happening at the same time
		can add new events in the future
		can deal damage, block damage, etc
	
	
	

items can:
	add a new move
	add a new synergy between evisting events

example start:
	obtain item that  gives attack move
	obtain item that gives windup move
	now with this amount of damage you can one shot an enemy, that normally regenerates health before your next attack


target areas:
	close: closest point in an x radius around the player to the mouse
	far: mouse position

events:
	windup:
		adds "windup done" event 1 beat later
	simple attack:
		does 10 damage to close target area
		does extra 10 damage if windup done event happens simultaneuously

object collection:
	should maintain vectors of pointers to specific types of objects inside itself

structure of event type storage:
	id
	list of ids of events to create, with times in future, with any conditions (concurrent events) for the creation of these events
	list of actions to do, eg to damage at close target area, do healing at far target area

actions:
	(all have amount)
	do damage at close target area
	do damage at far target area
	do damage to self
	do healing to self
	do healing at close target area
	do healing at far target area
	play sound
	addscreenshake

timing:
	there is a global clock, events dont have to happen on each tick, can happen anytime, but triggers etc are added by amounts of time that are multiples of the time between beats in the global clock

TODO:

	shouldnt be able to add the same event twice on one beat with user input DONE

	add do event directly to timer, for user input
		because a user should be able to set up something for beat 3, and then activate it any time in beat 3
		may have to be a different type of event? wont be detectable in the conditions part anyway

	

	have actions that are done in the middle of a beat(where sound currently plays)
		they can be conditional, as the events they rely on existing will already be in their beat from earlier (may change things overall?)

	enemies 
	add windows
	add amount being determined by time accuracy

	sound processing:
		load from soundbuffer into array: getSamples
		load into soundbuffer from array: loadFromSamples

	condition sounds DONE
	have condition for lack of event DONE
	should be able to pass on its amount with a modifier DONE
	should have conditions about its own amount DONE
	multiple conditions w multiple actions DONE


	CAPair:
		contains a condition list and an action list DONE
		if hasCondition is true, conditionlist is checked DONE
		if false or condlist satisfied, do action DONE


	action
		:int source id DONE
		:type (actiontype) DONE
		:amount DONE
		event type (to add) DONE
		event delay DONE
		sound name DONE
	event
		:source id DONE
		:type DONE
		:amount DONE
		:phase DONE
		:beat (if equal to current beat, triger event when up to phase) DONE
		CAPair list DONE

	event loader:
		is static
		load conditions DONE
		load actions DONE
	
	condition
		:bool has same source id DONE
		:type of concurrent event DONE
		:minimum amount of cuncurrent event DONE

	Timer / Global clock / Event tracker
		:console DONE
		and attach ticking sound DONE
		adds to phase position every frame based on bpm y*60 = bpm/60 DONE
		int beat DONE
		float phase DONE
		float phaseperframe DONE
		*vector events DONE
		void changeBpm(int bpm) DONE
		void addevent(int beats in future, source id, type, amount) DONE
		void update()
			get time and do phase and beat stuff DONE
			check new events and:
				delete is needed DONE
				run action
					add new events DONE
					play sounds DONE
					do commands DONE
		
		
