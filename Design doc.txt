2.5d
global clock
	attached to ticking sound
	can have this change for dif situations or moves?
	or sync w some music

all moves are synced to global clock
moves can add events that:
	block incoming damage
	do damage to an enemy
	set up something for next clock cycle, or more in the future
	things happening at the same time have synergy
temporarily slow downs time

moves are basically just bindings between controls and the creation of events
	

items can:
	add a new move
	upgrade a move (add a synergy/ new conditions etc)

example start:
	obtain item that  gives attack move
	obtain item that gives windup move
	now with this amount of damage you can one shot an enemy, that normally regenerates health before your next attack


target areas:
	close: closest point in an x radius around the player to the mouse
	far: mouse position

events:
	windup:
		adds "windup done" event 1 beat later
	simple attack:
		does 10 damage to close target area
		does extra 10 damage if windup done event happens simultaneuously

object collection:
	should maintain vectors of pointers to specific types of objects inside itself

structure of event type storage:
	id
	list of ids of events to create, with times in future, with any conditions (concurrent events) for the creation of these events
	list of actions to do, eg to damage at close target area, do healing at far target area

actions:
	(all have amount)
	do damage at close target area
	do damage at far target area
	do damage to self
	do healing to self
	do healing at close target area
	do healing at far target area
	play sound
	addscreenshake

timing:
	there is a global clock, events dont have to happen on each tick, can happen anytime, but triggers etc are added by amounts of time that are multiples of the time between beats in the global clock

TODO:

	add PRE/MID/POST actions and sounds

	inaudible middle beat, raise tempo

	add windows to conditions

	doing damage command
		AOE DONE
		to specific ID
		to all expect specific ID
		to all
		to enemies only
		amount
		type?

	

	sound processing:
		load from soundbuffer into array: getSamples
		load into soundbuffer from array: loadFromSamples

Setting and old plan:
// GAME plan
//
// SETTING:
// 
// you are software that found a way to download itself into a robotic body
// 
// the AR headset is for HUD and menus only
// 
// snowing and empty, stone things rise out of the ground, activated by pressure pads and levers
// at some point you find an augmented reality headset, allowing you to access the main gameplay of the game (before this point sometimes you are randomly attacked / damaged
// some things follow you out of AR
// 
// 
// cinematic bits that show you fighting nothing
// sometimes the AR will flicker
// some effects in game will cause noisyness in AR, or cut it out
// 
// // first AR encounter: put on, screen fased to black, then to black and white, then to colour with AR stuff
// 
// "real world" enemies are revealed at somepoint, first appear in AR but remain when taking your headset off
// at some point ar and the real world may switch (maybe showing it doesnt matter which way around it is?
//
// 
// GOAL: explore, upgrade gear, learn more and escape
// 
// MUSIC:
// 
//		intro track will be track 1 from my ep
//		another track will be triasic period
//		use drone track for some death sounds and maybe ambience
//		untitled 149 from FL for happy victory or chill bustling area
//		tracks w breaks for in AR
// 
// MECHANICS:
// 
//  - GENERAL
//		AR things used to open up real world areas
//		hovering drone indicates when virtual enemies are nearby
//		mostfights will be in AR
//		puzzles will have some AR component most of the time
//		AR headset will have battery, when it runs out and enemies come you are defenseless
// 
//  - COMBAT:
//		you can dash twice and then have a cooldown
//		can place down pylons, or marks, when 2 have been place a beem appears between the two for a split second and damages all enemies inside (beam: fire? electric?)
//		Dying in AR = dying irl, like killed by the guardians in halo, maybe a stone pillar will rise out of the snow and laser beam you
//		
//	- hovering drone:
//		indicates when virtual enemies are nearby
//		also indicates nearby things you can interact with
//		may play a role in other puzzles, leaving you vulerable it you make it stay in one place for a task
//		may also become possessed in some parts of the story, going yellow?
//		
// 
//	- INTERRACTION AND INVENTORY
//		F to interract, must hold F to use things, fills up a box or bar, instead of just clicking
//		E to open inventory
//		Interacting with specific thing can open and close doors, as well as spawn enemies and structures
// 
//  - ENVIRONMENTS:
//		Outdoors: snow and footprints
//		Indoors: stone walls and floor
// 
//	- AR:
//		some walls may only be in AR(and be able to be walked through) (may switch around when ar and normal modes switch?)
// 
// GRAPHICS:
//		Footprints and blood will be left on snow, fading away over time
//		Parallax scrolling for chasms etc (blur the background art for these)
// 
// TODO:
//		Screen effects class:
//			fading in/out, black / white
//			shader stuff
//		Global interfaces:
//			Graphics
//			Audio
//		Object class and inheritance and collection
//			bounding boxes
//			has z
//			generic drawing method
//			(for player, enemies, walls, stairs, items, Particle etc)
//			Object collection may need subsets that are loopable, for particles, enemies, etc
// 
//		Decoration class and inheritance and collection:
//			has xy and spritesheet/image
//			
//			(for blood, footsteps, burn marks)
// 
//		Particle class with inheritance and collection
//			Inherits object
//			has xyz and spritesheet/image
//			obeys same system as players and enemies in terms of elevated areas / cliffs
//			some should spawn decoration when landing / despawning
//			be able to remain on ground for set period of time, or disapear on impact
// 
//		Figure out system for elevated areas and stairs:
//			stairs: faster to walk down, slower to walk up
//			ledges/cliffs: falling off (moving off a raises platform(just a square) and not onto stairs, changes your position to a much greater y and adds equal z
//			then gravity and z is a thing
// 
//		Art:
//			Run cycle:
//				4 movement per frame
//				1 change per 4 frames
//				= 16 movement in image per frame of sheet
//				= 8 movement per frame of sheet becasue 2x scaling
// 
//  1 frame =  8 pixel step
//
		
		
